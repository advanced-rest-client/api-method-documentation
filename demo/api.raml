#%RAML 1.0
title: API body demo
version: v1
baseUri: http://{instance}.domain.com/

baseUriParameters:
  instance:
    description: |
      The execution environments. Can be one of:
      - development
      - staging
      - qa
      - production
    type: string
    enum: [development, staging, qa, production]
    pattern: (development|staging|qa|production)
    default: production
annotationTypes:
  deprecated: string
  annotationTest: nil
uses:
  ExampleType: resourceTypes/example-types.raml
types:
  Image: !include resourceTypes/image.raml
  Resource: !include resourceTypes/resource.raml
  AppPerson: !include resourceTypes/app-person.raml
  Product: !include resourceTypes/product.raml
  ErrorResource:
    description: A response that is errored
    type: object
    properties:
      error:
        type: boolean
        required: true
        example: true
        default: true
        description: Indicate that the response is errored.
      message:
        type: string
        description: The error message associated with the error.
        example: <<example>>
        required: true
  Feature:
    description: A feature to test enum values in the URI parameters.
    type: string
    enum:
      - A
      - B
      - C
resourceTypes:
  ErrorredResource:
    get:
  ResourceNotFound:
    type: ErrorredResource
    get:
      responses:
        404:
          body:
            application/json:
              displayName: Not found response
              type: ErrorResource
            application/xml:
              displayName: Not found response
              type: !include schemas/error-response.xsd
              example: !include examples/e404.xml
  UnauthorizedResponse:
    type: ErrorredResource
    get:
      responses:
        404:
          body:
            application/json:
              displayName: Unauthorized response
              type: ErrorResource
            application/xml:
              displayName: Unauthorized response
              type: !include schemas/error-response.xsd
              example: !include examples/e401.xml
  RequestErrorResponse:
    type: ErrorredResource
    get:
      responses:
        400:
          description: The error response when one of the parameters is invalid and can't be parsed. Nothing can be done at the time except correcting the request to send valid data.
          body:
            application/json:
              displayName: Invalid request
              type: ErrorResource
            application/xml:
              displayName: Invalid request
              type: !include schemas/error-response.xsd
              example: !include examples/e400.xml
traits:
  Paginated: !include traits/pagination.raml

/people:
  displayName: People
  get:
    (annotationTest):
    displayName: List people
    description: Use this method to list all the people.
    is: [Paginated: {resourceType: AppPerson}]
    headers:
      x-people-op-id:
        (annotationTest):
        type: string
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[4][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        description: People ops ID. It is UUID v4 string
        example: 9719fa6f-c666-48e0-a191-290890760b30
  post:
    (deprecated): |
      This method is not deprecated. And this is only an annotation test.
    displayName: Create a person
    description: Use this method to add new person
    body:
      application/json:
        (deprecated): This response type is deprecated and soon will be replaced.
        type: AppPerson
        example:
          id: "R34fg663H9KW9MMSKISI"
          name: "Pawel Psztyc"
          birthday: "1983-10-20"
          gender: male
          url: "https://domain.com/profile/pawel.psztyc"
          image:
            url: https://domain.com/profile/pawel.psztyc/image
            thumb: https://domain.com/profile/pawel.psztyc/image/thumb
          tagline: Some text about me.
          language: en_GB
          etag: "W\\244m4n5kj3gbn2nj4k4n4"
      application/xml:
        type: !include schemas/person.xsd
        example: !include examples/person.xml
      application/x-www-form-urlencoded:
        type: AppPerson
  put:
    displayName: Update a person
    description: Updates the person in the datastore.
    body:
      application/json:
        schema: !include schemas/person.json
        example: !include examples/person.json
      application/xml:
        type: !include schemas/person.xsd
        example: !include examples/person.xml
/products:
  displayName: Products
  description: The API is to be used to access data about the products.
  post:
    displayName: Create product
    description: |
      Creates a product in the store.
      While creating a product the `id` and `etag` properties will be ignored.

      The endpoint will reject the request if exactly the same product is already defined in the
      datastore (all properties of both objects equals). Newly created product is available
      for listing but **it won't be available for ordering API** until it's availability is not set.
    body:
      application/json:
        type: Product
    responses:
      200:
        body:
          application/json:
            type: Product
            examples:
              Product:
                id: d697f5cea85011e680f576304dec7eb7
                name: Super product
                quantity: 125
                unit: ml
                upc: "123456789101"
                available: true
                etag: "W/\"686897696a7c876b7e\""
              OtherProduct:
                id: 123e4567e89b12d3a456426655440000
                name: Acme Product
                quantity: 1
                unit: kg
                upc: "223456789101"
                available: true
                etag: "W/\"123456789\""
          application/xml:
            type: !include schemas/product.xsd
            example: !include examples/product.xml
      400:
        description: The request has been rejected. Probably the product already exists in the datastore.
/orgs:
  /{orgId}:
    put:
      body:
        application/json:
          type: ExampleType.Org
          properties:
            id:
              type: string
              description: UUID generated ID
      responses:
        200:
          body:
            application/json:
              type: ExampleType.Org
/messages:
  post:
    description: Create a new message
    body:
      application/json:
        type: object
        properties:
          receiver:
            type: string
            description: receiver of the message
            required: true
          body:
            type: string
            description: A message body
            required: true
          important:
            type: boolean
            description: If true then the message will be marked as important
            default: false
            required: true
  /bulk:
    post:
      description: Bulk create messages.
      body:
        application/json:
          type: array
          items: !include resourceTypes/message-sent-type.raml
          example: !include examples/messages-sent-example.json
